{"ast":null,"code":"var _jsxFileName = \"/home/matt/Documents/new-personal-projects/more-complex-menu/src/components/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport sublinks from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/React.createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isSubmenuOpen, setIsSubmenuOpen] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [location, setLocation] = useState({});\n  const [page, setPage] = useState('');\n\n  const openSubmenu = (text, coordinates) => {\n    setLocation(coordinates);\n    setIsSubmenuOpen(true);\n    console.log(isSubmenuOpen);\n  };\n\n  const closeSubmenu = () => {\n    setIsSubmenuOpen(false);\n  };\n\n  const openSidebar = () => {\n    setIsSidebarOpen(true);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        location,\n        isSubmenuOpen,\n        openSubmenu,\n        closeSubmenu,\n        isSidebarOpen,\n        closeSidebar,\n        openSidebar\n      },\n      children: [\" \", children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(AppProvider, \"DfMNir78TTe4h1yRcxFk8T5cTQ0=\");\n\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/home/matt/Documents/new-personal-projects/more-complex-menu/src/components/context.js"],"names":["React","useState","useContext","sublinks","AppContext","createContext","AppProvider","children","isSubmenuOpen","setIsSubmenuOpen","isSidebarOpen","setIsSidebarOpen","location","setLocation","page","setPage","openSubmenu","text","coordinates","console","log","closeSubmenu","openSidebar","closeSidebar","useGlobalContext"],"mappings":";;;;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AACA,OAAOC,QAAP,MAAqB,QAArB;;;AAEA,MAAMC,UAAU,gBAAGJ,KAAK,CAACK,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAEhC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,KAAD,CAAlD;AACI,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;;AAGJ,QAAMe,WAAW,GAAG,CAACC,IAAD,EAAMC,WAAN,KAAqB;AACrCL,IAAAA,WAAW,CAACK,WAAD,CAAX;AACAT,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYZ,aAAZ;AACH,GAJD;;AAKA,QAAMa,YAAY,GAAG,MAAK;AACtBZ,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AAEP,GAHG;;AAIA,QAAMa,WAAW,GAAG,MAAK;AACrBX,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACP,GAFG;;AAGA,QAAMY,YAAY,GAAG,MAAK;AACtBZ,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACP,GAFG;;AAKA,sBAAM;AAAA,2BACN,QAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,KAAK,EAAE;AAACC,QAAAA,QAAD;AAAWJ,QAAAA,aAAX;AAA0BQ,QAAAA,WAA1B;AAAsCK,QAAAA,YAAtC;AAAoDX,QAAAA,aAApD;AAAmEa,QAAAA,YAAnE;AAAiFD,QAAAA;AAAjF,OAA5B;AAAA,sBAA6Hf,QAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AADM,mBAAN;AAIH,CA7BD;;GAAMD,W;;KAAAA,W;AA+BN,OAAO,MAAMkB,gBAAgB,GAAG,MAAM;AAAA;;AACtC,SAAOtB,UAAU,CAACE,UAAD,CAAjB;AACC,CAFM;;IAAMoB,gB;;AAIb,SAAQpB,UAAR,EAAoBE,WAApB","sourcesContent":["\nimport React, {useState, useContext} from 'react'\nimport sublinks from './data'\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({children}) => {\n\n    const [isSubmenuOpen, setIsSubmenuOpen] = useState(false)\n        const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n        const [location, setLocation] = useState({})\n        const [page, setPage] = useState('')\n\n\n    const openSubmenu = (text,coordinates)=> {\n        setLocation(coordinates)\n        setIsSubmenuOpen(true); \n        console.log(isSubmenuOpen)\n    }\n    const closeSubmenu = ()=> {\n        setIsSubmenuOpen(false)\n    ; \n}\n    const openSidebar = ()=> {\n        setIsSidebarOpen(true); \n}\n    const closeSidebar = ()=> {\n        setIsSidebarOpen(false); \n}\n    \n\n    return<>\n    <AppContext.Provider value={{location, isSubmenuOpen, openSubmenu,closeSubmenu, isSidebarOpen, closeSidebar, openSidebar}}> {children}\n    </AppContext.Provider>\n    </>\n}\n\nexport const useGlobalContext = () => {\nreturn useContext(AppContext)\n}\n\nexport {AppContext, AppProvider}"]},"metadata":{},"sourceType":"module"}